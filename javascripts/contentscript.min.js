//console.info('[VA] Page Loaded');
/* variables */
var template = `
<div class="reclameaqui_container">
  <iframe src='https://www.theyworkforyou.com/mp/{{parlID}}'></iframe>
</div>`;

// var template;
var share_button = chrome.extension.getURL("images/share_button.png");
var logo_reclameaqui = chrome.extension.getURL("images/reclameaqui.png");
var langs = [];
var current_lang = 'pt-br';
var database = [];
var body_text;
var trigger_words;
var current_url;

/* load template */
// $.ajax({url: chrome.extension.getURL("template/tooltip.html")}).done(function (data) {
//     console.log('data', data.responseText);
//     template = (data.responseText) ? data.responseText : data;
// }).error(function(error){
//     console.log('error', error);
// });
/* get plain text from element */
function getPlainText($el) {
    return removeDiacritics($el.text());
}

/* check page has trigger words*/
function checkTriggerWords(trigger_words, callback) {
    body_text = getPlainText($('body')).toLowerCase();
    $.each(trigger_words, function (i, word) {
        if (new RegExp('\\b' + removeDiacritics(word) + '\\b', 'i').test(body_text)) {
            //console.log(word);
            //console.info('[VA] trigger callback');
            callback();
            return false;
        }
    });
}

/* loop functions async */
function asyncLoop(iterations, func, callback) {
    var index = 0;
    var done = false;
    var loop = {
        next: function () {
            if (done) {
                return;
            }

            if (index < iterations) {
                index++;
                func(loop);
            } else {
                done = true;
                callback();
            }
        },
        iteration: function () {
            return index - 1;
        },
        break: function () {
            done = true;
            callback();
        }
    };
    loop.next();
    return loop;
}

var checkedNames = new Set();
/* check element has polict name and create tooltip */
function proccessElement($element, politic) {

    //    if (!$element[0].hasOwnProperty('tagName')) {
    //        console.log($element);
    //        return;
    //    }

    $.each(politic.other_names, function (i, nameObj) {
        if(nameObj.lang !== 'en') return;
        var name = nameObj.name;
        if(checkedNames.has(name)) return;
        checkedNames.add(name);
        // console.log(`Searching ${name}`);
        var plain_text = $element[0].tagName && $element[0].tagName.toLowerCase() === 'body' ? body_text : getPlainText($element).toLowerCase();
        if (plain_text.length < 4)
            return;
        markElement($element, name, plain_text, politic);
    });
}
var tempoMark = 100;

function markElement($element, name, plain_text, politic) {
    if (new RegExp('\\b' + removeDiacritics(name).toLowerCase() + '\\b', 'i').test(plain_text)) {
        $element.mark(name, {
            element: "reclameaqui_mark",
            className: 'ra_mark',
            exclude: [
                ".reclameaqui_container *",
                "mark",
                '.usertext-body',
                '.ra_mark',
                ".reclameaqui_mark",
                "reclameaqui_mark",
                "mark_ignore",
                "inserted",
                "#composer_text_input_box *"
            ],
            ignoreJoiners: false,
            acrossElements: false,
            separateWordSearch: false,
            accuracy: {
                "value": "exactly",
                "limiters": [",", ".", "(", ")", "-", "'", "\"", "[", "]", "/", "@", "#"]
            },
            each: function (element) {
                /* create tooltip */
                $(element).tooltipster({
                    animation: "grow",
                    interactive: true,
                    contentAsHTML: true,
                    content: function () {
                        var html = Mustache.to_html(template, {
                            name: politic.name,
                            photo: politic.photo,
                            twitter: politic.contact_details.twitter,
                            email: politic.contact_details.email,
                            phone: politic.contact_details.phone,
                            parlID: politic.identifiers.find(p=>p.identifier.includes('uk.org.publicwhip')).identifier.match(/[0-9]+\/?$/)[0] || null
                        });
                        return html;
                    }
                });

                element.parentNode.addEventListener("DOMCharacterDataModified", function (evt) {
                    if ($(evt.currentTarget).hasClass('inserted')) {
                        $(evt.currentTarget).removeClass('inserted');
                        $(evt.currentTarget).find('reclameaqui_mark').remove();
                        setTimeout(function () {
                            markElement($element, name, plain_text, politic);
                        }, 1000);
                    } else {
                        setTimeout(function () {
                            markElement($element, name, plain_text, politic);
                        }, 1000);
                    }
                });
            }
        });
    }
}

function initTab() {

    //console.info('[VA] Init TAB: ' + current_url);

    chrome.runtime.sendMessage({ action: 'config' }, function (response) {
        //console.info('[VA] config ', response);
        langs = response.langs;
        current_lang = response.current_lang;
        trigger_words = response.trigger_words;
        checkTriggerWords(trigger_words, function () {
            //console.info('[VA] Trigger Words found');
            chrome.runtime.sendMessage({ action: 'check_names' }, function (response) {
                database = response.database;
                asyncLoop(database.length, function (loop) {
                    proccessElement($('body'), database[loop.iteration()]);
                    loop.next();
                }, function () { });
            });
        });
    });
}

$(function () {

    // reddit
    $('.edit-usertext').on('click', function () {
        var $text = $(this).parents('.entry');
        $text.find('textarea').first().text($text.find('.usertext-body').text());
    });

    $(document).on('click', '.change_lang', function () {
        chrome.runtime.sendMessage({ action: 'set_lang', lang: $(this).attr('data-lang') }, function () {
            window.location.reload();
        });
    });
    var tempoAtualizacao = 1000;
    $(document).on("DOMNodeInserted", function (o) {
        setTimeout(function () {
            var $o = $(o.target);

            // regra para twitter
            if ($o.hasClass('tweet-box') && $o.hasClass('rich-editor')) return;
            if ($o.parent().hasClass('tweet-box') && $o.parent().hasClass('rich-editor')) return;

            if ($o.hasClass('inserted') || $o.hasClass('ra_mark'))
                return;

            $o.addClass('inserted');

            asyncLoop(database.length, function (loop) {
                proccessElement($o, database[loop.iteration()]);
                loop.next();
            }, function () { });
            // console.log('tempoAtualizacao', tempoAtualizacao);
            // tempoAtualizacao+=100;
        }, tempoAtualizacao);
    });

    setTimeout(function () {
        initTab($('body'));
    }, 1000);
});

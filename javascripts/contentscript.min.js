//console.info('[VA] Page Loaded');
/* variables */
var template = `<div class="reclameaqui_container">  
    <div class="reclameaqui_left"> 
        <div class="sk-circle-off">
            <div class="sk-circle1 sk-child"></div>
            <div class="sk-circle2 sk-child"></div>
            <div class="sk-circle3 sk-child"></div>
            <div class="sk-circle4 sk-child"></div>
            <div class="sk-circle5 sk-child"></div>
            <div class="sk-circle6 sk-child"></div>
            <div class="sk-circle7 sk-child"></div>
            <div class="sk-circle8 sk-child"></div>
            <div class="sk-circle9 sk-child"></div>
            <div class="sk-circle10 sk-child"></div>
            <div class="sk-circle11 sk-child"></div>
            <div class="sk-circle12 sk-child"></div>
        </div>
        <div class="reclameaqui_foto">
            <div style="width:200px;height:240px;background:url({{photo}}) no-repeat center;background-size:cover" alt="Foto: {{name}}">
            </div> 
        </div>
    </div>
    <div class="reclameaqui_left">
        <div class="reclameaqui_nome reclameaqui_left" title="{{name}}">
            {{name}}
            <div class="reclameaqui_clear"></div>
        </div>
        <div style="float:right">
            {{#langs}}
            <a title="{{title}}" class="change_lang" data-lang="{{lang}}">
                <img src='{{image}}' style="float:right;height:11px;margin-left: 5px;width:16px">
            </a>
            {{/langs}}
        </div>
        <div class="reclameaqui_clear"></div>
        <div class="reclameaqui_left reclameaqui_candidato_detalhes">
            <div class="reclameaqui_left">
                <div class="reclameaqui_candidato_partido">Partido: {{party_name}}</div>
            </div>
            <div class="reclameaqui_left">
                <div class="reclameaqui_candidato_email">{{email}}</div>
            </div>
            <div class="reclameaqui_clear"></div>
        </div>
        <div class="reclameaqui_clear"></div>

        <div style="display:none;float:left;margin-top:3px;margin-bottom:3px;margin-left:3px;padding:5px 4px 5px;background:#FFF;color:#6C028E;font-size:11px" class="alteracaoLingua"></div>


        <div class="reclameaqui_content_wrap">
            <div class="reclameaqui_content">
                <!-- CONTENT -->
                {{{content}}}
                <!-- FINAL CONTENT -->
            </div>
        </div>
        <div class="reclameaqui_share_button">
            <a class="reclameaqui_share_link fb-xfbml-parse-ignore" target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=http://www.vigieaqui.com.br/" onclick="return !window.open(this.href, 'facebookShare', 'status=1,width=600,height=420,resizable=0')">
                <img src="{{share_button}}" alt="Compartilhar" /></a>
        </div>
        <div class="reclameaqui_scroll">
            <div>
                <a class="reclameaqui_scrollUp" href="#"><span class="reclameaqui_triangle_up"></span></a>
            </div>
            <div>
                <a class="reclameaqui_scrollDown" href="#"><span class="reclameaqui_triangle_down"></span></a>
            </div>
        </div>
    </div>
    <div class="reclameaqui_fonte"></div>
    <div class="reclameaqui_logotype">
        <a href="http://www.reclameaqui.com.br/" target="_blank">
            <img src='{{logo_reclameaqui}}' alt="RECLAME AQUI" />
        </a>
    </div>
</div>`;












// var template;
var share_button = chrome.extension.getURL("images/share_button.png");
var logo_reclameaqui = chrome.extension.getURL("images/reclameaqui.png");
var langs = [];
var current_lang = 'pt-br';
var database = [];
var body_text;
var trigger_words;
var current_url;

/* load template */
// $.ajax({url: chrome.extension.getURL("template/tooltip.html")}).done(function (data) {
//     console.log('data', data.responseText);
//     template = (data.responseText) ? data.responseText : data;
// }).error(function(error){
//     console.log('error', error);
// });
/* get plain text from element */
function getPlainText($el) {
    return removeDiacritics($el.text());
}

/* check page has trigger words*/
function checkTriggerWords(trigger_words, callback) {
    body_text = getPlainText($('body')).toLowerCase();
    $.each(trigger_words, function (i, word) {
        if (new RegExp('\\b' + removeDiacritics(word) + '\\b', 'i').test(body_text)) {
            //console.log(word);
            //console.info('[VA] trigger callback');
            callback();
            return false;
        }
    });
}

/* loop functions async */
function asyncLoop(iterations, func, callback) {
    var index = 0;
    var done = false;
    var loop = {
        next: function () {
            if (done) {
                return;
            }

            if (index < iterations) {
                index++;
                func(loop);
            } else {
                done = true;
                callback();
            }
        },
        iteration: function () {
            return index - 1;
        },
        break: function () {
            done = true;
            callback();
        }
    };
    loop.next();
    return loop;
}

/* check element has polict name and create tooltip */
function proccessElement($element, politic) {

    //    if (!$element[0].hasOwnProperty('tagName')) {
    //        console.log($element);
    //        return;
    //    }

    $.each(politic.name, function (i, names) {
        var plain_text = $element[0].tagName && $element[0].tagName.toLowerCase() === 'body' ? body_text : getPlainText($element).toLowerCase();
        if (typeof names === 'string')
            names = [names];
        if (plain_text.length < 4)
            return;
        $.each(names, function (i, name) {
            markElement($element, name, plain_text, politic);
        });
    });
}
var tempoMark = 100;

function markElement($element, name, plain_text, politic) {
    if (new RegExp('\\b' + removeDiacritics(name).toLowerCase() + '\\b', 'i').test(plain_text)) {
        $element.mark(name, {
            element: "reclameaqui_mark",
            className: 'ra_mark',
            exclude: [
                ".reclameaqui_container *",
                "mark",
                '.usertext-body',
                '.ra_mark',
                ".reclameaqui_mark",
                "reclameaqui_mark",
                "mark_ignore",
                "inserted",
                "#composer_text_input_box *"
            ],
            ignoreJoiners: false,
            acrossElements: false,
            separateWordSearch: false,
            accuracy: {
                "value": "exactly",
                "limiters": [",", ".", "(", ")", "-", "'", "\"", "[", "]", "/", "@", "#"]
            },
            each: function (element) {
                /* create tooltip */
                $(element).tooltipster({
                    animation: "grow",
                    interactive: true,
                    contentAsHTML: true,
                    content: function () {
                        var html = Mustache.to_html(template, {
                            name: politic.display_name,
                            party_name: politic.partido,
                            photo: politic.photo,
                            email: politic.email,
                            content: politic.content[current_lang],
                            share_button: share_button,
                            logo_reclameaqui: logo_reclameaqui,
                            langs: langs,
                            current_lang: current_lang
                        });
                        return html;
                    }
                });

                element.parentNode.addEventListener("DOMCharacterDataModified", function (evt) {
                    if ($(evt.currentTarget).hasClass('inserted')) {
                        $(evt.currentTarget).removeClass('inserted');
                        $(evt.currentTarget).find('reclameaqui_mark').remove();
                        setTimeout(function () {
                            markElement($element, name, plain_text, politic);
                        }, 1000);
                    } else {
                        setTimeout(function () {
                            markElement($element, name, plain_text, politic);
                        }, 1000);
                    }
                });
            }
        });
    }
}

function initTab() {

    //console.info('[VA] Init TAB: ' + current_url);

    chrome.runtime.sendMessage({ action: 'config' }, function (response) {
        //console.info('[VA] config ', response);
        langs = response.langs;
        current_lang = response.current_lang;
        trigger_words = response.trigger_words;
        checkTriggerWords(trigger_words, function () {
            //console.info('[VA] Trigger Words found');
            chrome.runtime.sendMessage({ action: 'check_names' }, function (response) {
                database = response.database;
                asyncLoop(database.length, function (loop) {
                    proccessElement($('body'), database[loop.iteration()]);
                    loop.next();
                }, function () { });
            });
        });
    });
}

$(function () {

    // reddit 
    $('.edit-usertext').on('click', function () {
        var $text = $(this).parents('.entry');
        $text.find('textarea').first().text($text.find('.usertext-body').text());
    });

    $(document).on('click', '.change_lang', function () {
        chrome.runtime.sendMessage({ action: 'set_lang', lang: $(this).attr('data-lang') }, function () {
            window.location.reload();
        });
    });
    var tempoAtualizacao = 1000;
    $(document).on("DOMNodeInserted", function (o) {
        setTimeout(function () {
            var $o = $(o.target);

            // regra para twitter
            if ($o.hasClass('tweet-box') && $o.hasClass('rich-editor')) return;
            if ($o.parent().hasClass('tweet-box') && $o.parent().hasClass('rich-editor')) return;

            if ($o.hasClass('inserted') || $o.hasClass('ra_mark'))
                return;

            $o.addClass('inserted');

            asyncLoop(database.length, function (loop) {
                proccessElement($o, database[loop.iteration()]);
                loop.next();
            }, function () { });
            // console.log('tempoAtualizacao', tempoAtualizacao);
            // tempoAtualizacao+=100;
        }, tempoAtualizacao);
    });

    setTimeout(function () {
        initTab($('body'));
    }, 1000);
});
